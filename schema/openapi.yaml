openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: shunmaruko@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://backend/
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: auth
    description: Authentication or authorization
paths:
  "/v1":
    get:
      description: "Sample description."
      summary: Root
      operationId: root__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  "/v1/auth/me":
    get:
      description: "Return user info if authed."
      tags:
        - auth
      summary: Get User
      operationId: get_user_auth_me
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  "/v1/auth/login":
    post:
      description: "Login."
      tags:
        - auth
      summary: Login
      operationId: login_auth_login_post
      parameters:
      - name: email
        in: query
        required: true
        schema:
          type: string
          format: email
          title: Email
      - name: password
        in: query
        required: true
        schema:
          type: string
          title: Password
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/v1/auth/register":
    post:
      description: "Register."
      tags:
        - auth
      summary: Register
      operationId: register_auth_register_post
      parameters:
      - name: email
        in: query
        required: true
        schema:
          type: string
          format: email
          title: Email
      - name: role
        in: query
        required: true
        schema:
          type: string
          title: Role
      - name: password
        in: query
        required: true
        schema:
          type: string
          title: Password
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Message"
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  "/v1/auth/logout":
    post:
      description: "Logout."
      tags:
        - auth
      summary: Logout
      operationId: logout_auth_logout_post
      responses:
        '204':
          description: No content
components:
  schemas:
    Message:
      properties:
        message:
          type: string
      description: "Simply return message."
    User:
      properties:
        email:
          type: string
          format: email
          description: "User email"
        roles:
          type: array
          items:
            type: string
          description: "A list of roles assigned to the user"
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            "$ref": "#/components/schemas/ValidationError"
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    ValidationError:
      properties:
        loc:
          items:
            type: string
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError