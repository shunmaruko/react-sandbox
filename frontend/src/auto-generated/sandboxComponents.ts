/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.11
 */
import * as reactQuery from "@tanstack/react-query";
import { useSandboxContext, SandboxContext } from "./sandboxContext";
import type * as Fetcher from "./sandboxFetcher";
import { sandboxFetch } from "./sandboxFetcher";
import type * as Schemas from "./sandboxSchemas";

export type RootGetError = Fetcher.ErrorWrapper<undefined>;

export type RootGetVariables = SandboxContext["fetcherOptions"];

/**
 * Sample description.
 */
export const fetchRootGet = (
  variables: RootGetVariables,
  signal?: AbortSignal,
) =>
  sandboxFetch<void, RootGetError, undefined, {}, {}, {}>({
    url: "/",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Sample description.
 */
export const useRootGet = <TData = void,>(
  variables: RootGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<void, RootGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useSandboxContext(options);
  return reactQuery.useQuery<void, RootGetError, TData>({
    queryKey: queryKeyFn({ path: "/", operationId: "rootGet", variables }),
    queryFn: ({ signal }) =>
      fetchRootGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type GetUserAuthMeError = Fetcher.ErrorWrapper<undefined>;

export type GetUserAuthMeVariables = SandboxContext["fetcherOptions"];

/**
 * Return user info if authed.
 */
export const fetchGetUserAuthMe = (
  variables: GetUserAuthMeVariables,
  signal?: AbortSignal,
) =>
  sandboxFetch<Schemas.User, GetUserAuthMeError, undefined, {}, {}, {}>({
    url: "/auth/me",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Return user info if authed.
 */
export const useGetUserAuthMe = <TData = Schemas.User,>(
  variables: GetUserAuthMeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.User, GetUserAuthMeError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useSandboxContext(options);
  return reactQuery.useQuery<Schemas.User, GetUserAuthMeError, TData>({
    queryKey: queryKeyFn({
      path: "/auth/me",
      operationId: "getUserAuthMe",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetUserAuthMe({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type LoginAuthLoginPostQueryParams = {
  /**
   * @format email
   */
  email: string;
  password: string;
};

export type LoginAuthLoginPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type LoginAuthLoginPostVariables = {
  queryParams: LoginAuthLoginPostQueryParams;
} & SandboxContext["fetcherOptions"];

/**
 * Login.
 */
export const fetchLoginAuthLoginPost = (
  variables: LoginAuthLoginPostVariables,
  signal?: AbortSignal,
) =>
  sandboxFetch<
    Schemas.User,
    LoginAuthLoginPostError,
    undefined,
    {},
    LoginAuthLoginPostQueryParams,
    {}
  >({ url: "/auth/login", method: "post", ...variables, signal });

/**
 * Login.
 */
export const useLoginAuthLoginPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      LoginAuthLoginPostError,
      LoginAuthLoginPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useSandboxContext();
  return reactQuery.useMutation<
    Schemas.User,
    LoginAuthLoginPostError,
    LoginAuthLoginPostVariables
  >({
    mutationFn: (variables: LoginAuthLoginPostVariables) =>
      fetchLoginAuthLoginPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RegisterAuthRegisterPostQueryParams = {
  /**
   * @format email
   */
  email: string;
  role: string;
  password: string;
};

export type RegisterAuthRegisterPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type RegisterAuthRegisterPostVariables = {
  queryParams: RegisterAuthRegisterPostQueryParams;
} & SandboxContext["fetcherOptions"];

/**
 * Register.
 */
export const fetchRegisterAuthRegisterPost = (
  variables: RegisterAuthRegisterPostVariables,
  signal?: AbortSignal,
) =>
  sandboxFetch<
    Schemas.Message,
    RegisterAuthRegisterPostError,
    undefined,
    {},
    RegisterAuthRegisterPostQueryParams,
    {}
  >({ url: "/auth/register", method: "post", ...variables, signal });

/**
 * Register.
 */
export const useRegisterAuthRegisterPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Message,
      RegisterAuthRegisterPostError,
      RegisterAuthRegisterPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useSandboxContext();
  return reactQuery.useMutation<
    Schemas.Message,
    RegisterAuthRegisterPostError,
    RegisterAuthRegisterPostVariables
  >({
    mutationFn: (variables: RegisterAuthRegisterPostVariables) =>
      fetchRegisterAuthRegisterPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type LogoutAuthLogoutPostError = Fetcher.ErrorWrapper<undefined>;

export type LogoutAuthLogoutPostVariables = SandboxContext["fetcherOptions"];

/**
 * Logout.
 */
export const fetchLogoutAuthLogoutPost = (
  variables: LogoutAuthLogoutPostVariables,
  signal?: AbortSignal,
) =>
  sandboxFetch<undefined, LogoutAuthLogoutPostError, undefined, {}, {}, {}>({
    url: "/auth/logout",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Logout.
 */
export const useLogoutAuthLogoutPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      LogoutAuthLogoutPostError,
      LogoutAuthLogoutPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useSandboxContext();
  return reactQuery.useMutation<
    undefined,
    LogoutAuthLogoutPostError,
    LogoutAuthLogoutPostVariables
  >({
    mutationFn: (variables: LogoutAuthLogoutPostVariables) =>
      fetchLogoutAuthLogoutPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QueryOperation =
  | {
      path: "/";
      operationId: "rootGet";
      variables: RootGetVariables;
    }
  | {
      path: "/auth/me";
      operationId: "getUserAuthMe";
      variables: GetUserAuthMeVariables;
    };
