openapi: 3.0.3
info:
  contact:
    email: shunmaruko@gmail.com
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Petstore - OpenAPI 3.0
  version: 1.0.11
servers:
- url: http://backend/
tags:
- description: Everything about your Pets
  externalDocs:
    description: Find out more
    url: http://swagger.io
  name: pet
- description: Authentication or authorization
  name: auth
paths:
  /v1:
    get:
      description: Sample description.
      operationId: root__get
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Root
  /v1/auth/authorization:
    get:
      description: "Authorization Request spec. For detail, see https://datatracker.ietf.org/doc/html/rfc6749#section-4.2."
      operationId: authorization
      parameters:
      - explode: true
        in: query
        name: response_type
        required: true
        schema:
          enum:
          - token
          type: string
        style: form
      - description: The client identifier. We use email as it.
        explode: true
        in: query
        name: client_id
        required: true
        schema:
          type: string
        style: form
      - description: The URI to redirect to after authorization.
        explode: true
        in: query
        name: redirect_uri
        required: false
        schema:
          default: ""
          format: uri
          type: string
        style: form
      - description: "A list of scopes expressed as a list of space-delimited, case-sensitive\
          \ strings. default is [general]"
        explode: false
        in: query
        name: scope
        required: false
        schema:
          default:
          - general
          items:
            type: string
          type: array
        style: spaceDelimited
      - description: RECOMMENDED.  An opaque value used by the client to maintain
          state between the request and callback.
        explode: true
        in: query
        name: state
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "302":
          description: Redirect to the client with the access token
          headers:
            Location:
              description: URL to redirect to with the access token
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
      summary: Authorize user.
      tags:
      - auth
  /v1/auth/me:
    get:
      description: Return user info if authed.
      operationId: me
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
      security:
      - auth:
        - admin
        - general
      summary: Get User
      tags:
      - auth
  /v1/auth/login:
    post:
      description: Login.
      operationId: login
      parameters:
      - explode: true
        in: query
        name: email
        required: true
        schema:
          format: email
          title: Email
          type: string
        style: form
      - explode: true
        in: query
        name: password
        required: true
        schema:
          title: Password
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Login
      tags:
      - auth
  /v1/auth/register:
    post:
      description: Register.
      operationId: register
      parameters:
      - explode: true
        in: query
        name: email
        required: true
        schema:
          format: email
          title: Email
          type: string
        style: form
      - explode: true
        in: query
        name: password
        required: true
        schema:
          title: Password
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
          headers:
            Set-Cookie:
              explode: false
              schema:
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
                type: string
              style: simple
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Register
      tags:
      - auth
  /v1/auth/logout:
    post:
      description: Logout.
      operationId: logout
      responses:
        "204":
          description: No content
      summary: Logout
      tags:
      - auth
components:
  schemas:
    User:
      example:
        roles:
        - roles
        - roles
        email: email
      properties:
        email:
          description: User email
          format: email
          title: email
          type: string
        roles:
          description: A list of roles assigned to the user
          items:
            type: string
          title: roles
          type: array
      required:
      - email
      - roles
      title: User
      type: object
    HTTPValidationError:
      example:
        detail:
        - msg: msg
          loc:
          - loc
          - loc
          type: type
        - msg: msg
          loc:
          - loc
          - loc
          type: type
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    ValidationError:
      example:
        msg: msg
        loc:
        - loc
        - loc
        type: type
      properties:
        loc:
          items:
            type: string
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
  securitySchemes:
    auth:
      flows:
        implicit:
          authorizationUrl: http://http://0.0.0.0:8080/v1/auth/authorization
          scopes:
            admin: administrator
            general: general user
      type: oauth2
    api_key:
      in: header
      name: api_key
      type: apiKey
